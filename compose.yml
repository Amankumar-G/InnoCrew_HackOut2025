services:
  # Reverse proxy service
  nginx:
    image: nginx:alpine
    container_name: hackout-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro   # keep config read-only
      - ./logs:/var/log/nginx:rw               # allow logs
      - ./cache:/var/cache/nginx:rw            # allow cache/temp
    depends_on:
      - client
      - server
      # - ml-service
    restart: unless-stopped
    networks:
      - hackout-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React frontend service
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: hackout-client
    # Remove expose since it's internal only
    restart: unless-stopped
    networks:
      - hackout-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - NODE_ENV=production

  # Node.js backend service
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: hackout-server
    expose:
      - "8000"
    restart: unless-stopped
    networks:
      - hackout-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - NODE_ENV=production
      - PORT=8000
    env_file:
      - .env
    volumes:
      - ./server/uploads:/app/uploads
      - ./server/logs:/app/logs

  # Python ML service
  # ml-service:
  #   build:
  #     context: ./ml-service
  #     dockerfile: Dockerfile
  #   container_name: hackout-ml-service
  #   expose:
  #     - "8001"
  #   restart: unless-stopped
  #   networks:
  #     - hackout-network
  #   healthcheck:
  #     test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health')"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s
  #   environment:
  #     - PYTHONPATH=/app
  #   volumes:
  #     - ./ml-service/app/model:/app/app/model:ro
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 2G
  #       reservations:
  #         memory: 1G

networks:
  hackout-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  uploads:
  logs:
